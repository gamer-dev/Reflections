1) What happens when you initialize a repository? Why do you need to do it?

-->
    A repository is a hidden folder, a black box, from where git does its magic! When we initialize a repository,
	git creates an empty directory in the directory which we are currrently in. We need to do it, as it will
	keep track of the files we wish to commit, and enable Version Control by storing the metadata of the various
	versions of the file.
	
2) How is the staging area different from the working directory and the repository? What value do you think it offers?

-->
	The working area is the place where we work on our files, store them. And the staging area is the place where we store the changes 
	that occured on our files. It is the middle ground between working directory and the repository. It is the place that lets us keep
	only those files in our working directory, that need to be commited. The value it offers is that it acts as a necessary buffer 
	to keep files that need to be commited, tracked by git. We can also remove the files that do not need to be commited, so it
	also offers some safety measures, if we accidentally choose the wrong file to be commited.
	
3)  How can you use the staging area to make sure you have one commit per logical change?

-->
	By adding one file to the staging area per one logical change we have made to that file; and not adding other files
	to the stage, we can make sure that we have one commit per logical change. I.e, make one logical change in one file >
	add to stage > commit. This is the process to acheive that!
	
4)	What are some situations when branches would be helpful in keeping your history organized? How would branches help?

-->
	Whenever we would like to work on an additional or an experimental feature in our software, we can use 
	the branch to do so, to not mess up the main files and also to be simultaneously work on both of the features of the 
	software. Thus, by creating a seperate entity to do different work(s) on it, branches make the project more
	organised and thus help to maintain and organize our history. 
	Also, we have the abiity to merge the branches into our main/master, so that we can easily add any changes of the branch
	successfully. 
	Thus, by creating a seperate thread to do our work in, and later on combine them if needed, Branches in git
	help to organize our history in a clean and a simple manner, which wouldn't have been acheiveable if we had kept
	using the checkout option in git.


5)  How do the diagrams help you visualize the branch structure?

-->
	Diagrams provide a visual representation of what commits we are making in our repository. Repository is a collection
	of snapshots of commits at various time points. By making diagrams, we can see the various commits we made, how many
	branches are there and where we are on the tree. It also helps to see us how the features are on different branches than
	the main branch and what improvements are currently being worked on, and which features were completed and merged to the
	main branch.
	
6)  What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

-->
	The result of merging two branches is that the commit history of one branch gets combined (interleaved) with the another
	according to the timestamp, and makes a new commit on the current branch (the checked-out branch) thus creating the appearance
	of these two branches joining into one. So, what it does is that it makes available the commits of one branch to another, and we thus
	can access the whole commits of both branches. It combines these two branches and makes them as 1, effectively. It incorporates all
	the changes that were introduced in both the branches and gives us a single up-to-date branch.
	We represent it in the diagram the way that we do is that because creating a branch separates the work done, and merging makes all
	the work done separetly into one. It combines all the changes, the fixes, the features from one branch to another. Thus, it is shown that
	way in the branch.
	
7)  What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

-->
	Pros of Auto Merging:
	
	i)  Convinient for the developer. They don't have to look over each file and determine what should and shouldn't be there.
	ii) Fast Workflow. The Work will be sped up as you don't spend much time mulling over what needs to be added/deleted.
	
	Cons of Auto Merging:
	
	i)  If Git always performed auto merge, then some times it may mess up, when conflicts arise. It could incorrectly decide which code to keep and 
	    which code to ditch, leading into a major software breakdown.
	
	Pros of Manual Merging:
	
	i) Whenever conflicts occur, the developer himself can correctly choose which of the code to keep and which of the code to delete, as he has 
	   the specific knowledge about the code that will not break the software. He will make the correct decisions.
	
	Cons of Manual Merging:
	
	i) Slow and lots of efforts required. 
	
	
	
	
	
